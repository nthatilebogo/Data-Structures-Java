The task is to implement a data structure that combines the d-heap with the min-max
heap. In other words, you have to implement a fully-functional min-max d-heap.

Problem Description:

A priority queue is an abstract data type similar to a regular queue, but where each element has a
“priority” associated with it, in addition to the stored data. In a priority queue, an element with high
priority is always served before an element with low priority. If two elements have the same priority,
they are served according to their order in the queue.
A double-ended priority queue is a data structure similar to a priority queue, but where efficient removal
of both the maximum and minimum (highest and lowest priority) elements is allowed, according to
some ordering of the keys stored in the structure.
Priority queues can be implemented as heaps, since storing the highest priority element as the root of
the heap ensures O(1) access. For double-ended priority queues, we would need to ensure that both
the highest and the lowest priority elements are immediately accessible. This can be accomplished by
storing two heaps: a min-heap and a max-heap. Alternatively, memory efficiency can be improved by
combining the two heaps into a single structure, knows as the min-max heap.

Min-Max Heap:

A min-max heap is a complete binary tree data structure which combines the usefulness of both a minheap and a max-heap, that is, it provides O(1) retrieval and O(log n) removal of both the minimum
and maximum elements in it. This makes the min-max heap a very useful data structure to implement
a double-ended priority queue.
The min-max heap property is: each node at an even level in the tree is less than all of its descendants,
while each node at an odd level in the tree is greater than all of its descendants. Thus, min-max heaps
are made of alternating min (or even) and max (or odd) levels. The root element has the smallest
priority key in the min-max heap. One of the two elements in the second level, which is a max (or
odd) level, has the largest priority key in the min-max heap.

d-Heap:

A d-heap is a heap structure that allows for up to d children per node. One of the motivations behind
implementing such a structure is that the more children each node can have, the more nodes can be
contained on fewer levels. A binary heap is a 2-heap, d = 2. A ternary heap is a 3-heap, d = 3. An
example of a min d-heap, d = 3, is shown in Fig. 2.
The d-heap consists of an array of n items, each of which has a priority associated with it. These
items may be viewed as the nodes in a complete d-ary tree, listed in breadth first traversal order: the
item at position 0 of the array forms the root of the tree, the items at positions 1 through d are its
children, etc. Just like the binary heap, the d-heap is always interpreted as a perfectly balanced tree
with no gaps between the nodes on each level. To derive the location of the parent/grandparent of the
item at position i (for any i > 0), you will have to generalise the binary heap formulae given in the
textbook. According to the heap property, in a min-heap, each item has a priority that is at least as
large as its parent; in a max-heap, each item has a priority that is no larger than its parent.
